type Query {
    capabilities: [Capability]
    capability(id: ID!): Capability
    ratings: [Rating]
    rating(id: ID!): Rating
    features: [Feature]
    feature(id: ID!): Feature
    vendors: [Vendor]
    vendor(id: ID!): Vendor
    persons: [Person]
    person(id: ID!):Person
}

type StatusMessage{
    code:String!
    message: String!
}

type Mutation {
    addRating(rating: RatingInput): IRating
    addCapability(capability: CapabilityInput): ICapability
    addFeature(feature: FeatureInput): IFeature
    addVendor(vendor: VendorInput): IVendor
    addReviewer(reviewer: ReviewerInput): IPerson
    addPerson(person: PersonInput): IPerson

    updateRating(rating: UpdateRatingInput): IRating
    updateCapability(capability: UpdateCapabilityInput): ICapability
    updateFeature(feature: UpdateFeatureInput): IFeature
    updateVendor(vendor: UpdateVendorInput): IVendor
    updatePerson(person: UpdatePersonInput): IPerson

    deleteRating(id: String): StatusMessage
    deleteCapability(id: String): StatusMessage
    deleteFeature(id: String): StatusMessage
    deleteVendor(id: String): StatusMessage
    deleteReviewer(id: String): StatusMessage
    deletePerson(id: String) :StatusMessage
}

scalar Date

interface ICapability{
    id: String
    name:String
    description: String
    #ratings:  [IRating]
    createdAt: Date
    updatedAt: Date
}

interface IVendor {
    id: String
    name: String
    comment:  String
    contacts: [IPerson]
    updatedAt: Date
}

interface IPerson {
    id: String
    firstName: String
    lastName: String
    email: String
    updatedAt: Date
}

interface IFeature {
    id: String
    name:String
    description: String
    createdAt: Date
    updatedAt: Date
    #ratings:  [IRating]
}

interface IRating{
    id: String
    score: Float
    comment: String
    reviewer: IPerson
    capability: ICapability
    feature: IFeature
    vendor: IVendor
    createdAt: Date
    updatedAt: Date
}

type Feature implements IFeature {
    id: String
    name:String
    description: String
    #ratings:  [IRating]
    createdAt: Date
    updatedAt: Date
}

type Person implements IPerson {
    id: String
    firstName: String
    lastName: String
    email: String
    updatedAt: Date
}

type Reviewer implements IPerson {
    id: String
    firstName: String
    lastName: String
    email: String
    updatedAt: Date
}

type Capability implements ICapability{
    id: String
    name:String
    description: String
    #ratings:  [IRating]
    createdAt: Date
    updatedAt: Date
}

input FeatureInput  {
    name:String!
    description: String!
    capability_id: String!
}

input UpdateFeatureInput  {
    id: String
    name:String!
    description: String!
    capability_id: String!
}

type Vendor implements IVendor {
    id: String
    name: String
    comment:  String
    contacts: [Person]
    updatedAt: Date
}

type Rating implements  IRating{
    id: String
    score: Float
    comment: String
    reviewer: Person
    feature: Feature
    capability: Capability
    vendor: Vendor
    createdAt: Date
    updatedAt: Date
}

input PersonInput{
    firstName: String!
    lastName: String!
    email: String!
}

input UpdatePersonInput{
    id: String!
    firstName: String
    lastName: String
    email: String
}

input ReviewerInput  {
    person_id: String!
}

input CapabilityInput{
    name:String!
    description: String!
}

input UpdateCapabilityInput{
    id: String!
    name:String
    description: String
}

input VendorInput{
    name: String!
    comment:  String!
    contact_person_id: String!
}

input UpdateVendorInput{
    id: String!
    name: String
    comment:  String
    contact_person_id: String
}

input UpdateRatingInput{
    id: String!
    rating: Float
    comment: String
    reviewer_person_id: String
    vendor_id: String
    feature_id: String
}

input RatingInput{
    rating: Float!
    comment: String!
    reviewer_person_id: String!
    vendor_id: String!
    feature_id: String!
}

